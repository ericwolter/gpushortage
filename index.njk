<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>When will the NVIDIA GPU shortage end?</title>
  <style>
  {% include "node_modules/normalize.css/normalize.css" %}
  {% include "css/style.css" %}
  </style>
  <script data-ad-client="ca-pub-5717136270400903" async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-42589062-1"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'UA-42589062-1');
  </script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@0.1.2/dist/chartjs-adapter-moment.min.js"></script>
</head>
<body>
  <main>
    <article>
      <header>
        <h1>When will the NVIDIA GPU shortage end?</h1>
        <div class="byline">
          <address class="author">By <a rel="author" href="https://www.ericwolter.com">Eric Wolter</a></address>
        </div>
      </header>
      <section>
        <table>
          <caption>Last Updated: <time datetime="2021-04-11" title="April 11th, 2021">2021-04-11</time></caption>
          <thead>
            <tr>
              <th>Product</th>
              <th>MSRP</th>
              <th>eBay</th>
              <th>Extra</th>
              <th>14-day Trend</th>
            </tr>
          </thead>
          <tbody id="product-table">
          </tbody>
        </table>
      </section>
      <section class="text">
      <p>At the end of 2020 the <a href="https://www.nvidia.com/en-us/geforce/graphics-cards/30-series/">GeForce RTX 3000 series</a> launched with very good reviews. Unfortunately, you <em>can't buy them…</em></p>
      {# <p>The great GPU shortage of 2020 (and 2021). The reason for this shortage can be summarized in the following points all hitting at the same time:</p>
      <ul>
        <li>Better than expected performance improvements for GPUs</li>
        <li>Limited manufactoring capacity due to coronavirus outbreak</li>
        <li>Increased demand for electronics due to home office</li>
        <li>Increased price for cryptocurrenies (Bitcoin, Ethereum)</li>
        <li>Scalpers using bots to buy products and resell with high margins</li>
      </ul> #}
      <p>
To get a better overview of the situation this site regularly pulls the recently sold auctions from <a href="ebay.com">eBay</a>. 
Some (very simple) maths later you get these beautiful charts.
      </p>
      <p>
The idea is that as long the price is increasing or stable, production is still unable to meet the demand. 
Hopefully at some point prices will start to come down once the tippy-top of the market has been satisfied.
Once this happens prices will begin to fall and new groups of buyers will get a chance. Eventually, the price should come down to the MSRP and allow everybody (finally) to buy at a <em>reasonable price</em>.
      </p>
      <p>
Unfortunately, at the time of creating this site, there is <em>no end in sight…</em>
      </p>
      </section>
      <section class="charts" id="chart-container">
      </section>
    </article>
  </main>
  <script>
  {% include "js/chart.js" %}
  {% include "js/utils.js" %}
  </script>
  <script>
    Chart.pluginService.register(horizonalLinePlugin);

    let products = [
      {
        company: "NVIDIA",
        shortname: "RTX 3060 Ti",
        longname: "NVIDIA GeForce RTX 3060 Ti Founders Edition",
        msrp: 399.0,
        url: "data/nvidia/us_3060tife.json"
      },
      {
        company: "NVIDIA",
        shortname: "RTX 3070",
        longname: "NVIDIA GeForce RTX 3070 Founders Edition",
        msrp: 499.0,
        url: "data/nvidia/us_3070fe.json"
      },
      {
        company: "NVIDIA",
        shortname: "RTX 3080",
        longname: "NVIDIA GeForce RTX 3080 Founders Edition",
        msrp: 699.0,
        url: "data/nvidia/us_3080fe.json"
      },
      {
        company: "NVIDIA",
        shortname: "RTX 3090",
        longname: "NVIDIA GeForce RTX 3090 Founders Edition",
        msrp: 1499.0,
        url: "data/nvidia/us_3090fe.json"
      }
    ]

    const productTable = document.getElementById('product-table');
    const chartContainer = document.getElementById('chart-container');

    products.forEach(p => {
      let tr = document.createElement("tr");

      let h3 = document.createElement("h3");
      h3.textContent = p.longname;
      let h4 = document.createElement("h4")
      h4.textContent = '7-day moving median price on eBay';

      let canvas = document.createElement("canvas");
      chartContainer.appendChild(h3);
      chartContainer.appendChild(h4);
      chartContainer.appendChild(canvas);

      getJSON(p.url, function (err, data) {
        var data = data.map(d => {
          return {
            t: new Date(d.date).valueOf(),
            y: d.avg
          }
        });

        let tdName = document.createElement("td")
        tdName.textContent = p.shortname
        let tdMSRP = document.createElement("td")
        tdMSRP.textContent = '$' + p.msrp.toFixed(2)
        let tdEbay = document.createElement("td")
        let ebayPrice = data[data.length - 1].y
        tdEbay.textContent = '$' + ebayPrice.toFixed(2);

        let tdCharge = document.createElement("td");
        tdCharge.textContent = (ebayPrice > p.msrp ? '+' : '') + (100 * (ebayPrice - p.msrp) / p.msrp).toFixed(0) + '%';

        const last_day = data[data.length - 1].t
        const prev_30days = addDays(last_day, -14)
        let month = data.filter(d => d.t > prev_30days && d.t <= last_day);

        var x_sum = 0
        var y_sum = 0
        month.forEach((d, i) => {
          x_sum += i;
          y_sum += d.y;
        });
        var x_mean = x_sum / month.length;
        var y_mean = y_sum / month.length;

        var diff = (data[data.length - 1].y - y_mean) / y_mean

        // var top_sum = 0
        // var bottom_sum = 0
        // month.forEach((d, i) => {
        //   top_sum += (i - x_mean) * (d.y - y_mean)
        //   bottom_sum += (i - x_mean) * (i - x_mean)
        // });
        // var m_slope = top_sum / bottom_sum;

        let tdTrend = document.createElement("td");
        tdTrend.setAttribute('class', 'trend')
        if (diff > 1.0/100.0) {
          tdTrend.setAttribute('class', 'up')
          tdTrend.textContent = "↗️"
        } else if (diff < -1.0/100.0) {
          tdTrend.setAttribute('class', 'down')
          tdTrend.textContent = "↘️"
        } else {
          tdTrend.setAttribute('class', 'stable')
          tdTrend.textContent = "➡️";
        }

        tr.appendChild(tdName);
        tr.appendChild(tdMSRP);
        tr.appendChild(tdEbay);
        tr.appendChild(tdCharge);
        tr.appendChild(tdTrend);

        var ctx = canvas.getContext('2d');

        var myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
              datasets: [
                {
                  label: '7-day median',
                  data: data,
                  type: 'line',
                  backgroundColor: "rgba(139, 139, 139, 0.33)",
                  borderColor: "rgba(139, 139, 139, 1.0)",
                  pointRadius: 0,
                  lineTension: 0.5
                }
              ]
            },
            options: {
              horizontalLine: [
                {
                  y: p.msrp,
                  color: "rgba(88,139,22,0.7)",
                  height: 30,
                  label: {
                    text: "MSRP $" + p.msrp.toFixed(2),
                    font: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif',
                    fontColor: "#fff"
                  }
                },
                {
                  y: data[data.length - 1].y,
                  color: "rgba(117,185,31,0.7)",
                  height: 30,
                  label: {
                    text: "Latest $" + data[data.length - 1].y.toFixed(2),
                    font: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif',
                    fontColor: "#fff"
                  }
                }                
              ],
              legend: {
                display: false,
                labels: {
                  fontColor: '#333'
                },
                position: 'bottom'
              },
              scales: {
                xAxes: [
                  {
                    gridLines: {
                      color: 'rgba(51,51,51,0.33)'
                    },
                    ticks: {
                      fontColor: 'rgba(51,51,51,0.33)'
                    },
                    time: {
                      unit: 'week',
                      round: true
                    },
                    type: 'time',
                    distribution: 'linear'
                  }
                ],
                yAxes: [
                  {
                    gridLines: {
                      color: 'rgba(51,51,51,0.33)'
                    },
                    ticks: {
                      fontColor: 'rgba(51,51,51,0.33)',
                      beginAtZero: true
                    }
                  }
                ]
              },
              tooltips: {
                displayColors: false,
                intersect: false,
                mode: 'index',
                callbacks: {
                  label: function (tooltipItem, myData) {
                    return '$' + parseFloat(tooltipItem.value).toFixed(2) + ' (' + (
                      tooltipItem.value > p.msrp
                      ? '+'
                      : '') + (100 * (tooltipItem.value - p.msrp) / p.msrp).toFixed(0) + '%)'
                  }
                }
              }
            }
          });
      });

      productTable.appendChild(tr);
    });
  </script>
</body>

</html>